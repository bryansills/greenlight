{"version":3,"sources":["webpack:///./src/components/FullScreenMap.js","webpack:///./src/components/HeatMap.js","webpack:///./src/components/Dropdown.js","webpack:///./src/components/ObstructionMap.js","webpack:///./src/utils/process.js","webpack:///./src/templates/CityMap.js"],"names":["FullScreenMap","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","state","_updateDimensions","window","height","innerHeight","setState","forceUpdate","inheritsLoose_default","_proto","prototype","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","_this$props","props","children","rest","objectWithoutPropertiesLoose_default","react_default","a","createElement","Map","Object","assign","style","React","Component","HeatMap","position","zoom","points","className","mapStyle","map","FullScreenMap_FullScreenMap","center","TileLayer","attribution","url","HeatmapLayer_default","latitudeExtractor","m","longitudeExtractor","intensityExtractor","parseFloat","Dropdown","_onChange","event","onChange","target","value","_renderOptions","options","option","key","spinner","selectedOption","dropdownStyles","spinner_container","defaultProps","ObstructionMap","_onChangeObstruction","getGroupedPoints","HeatMap_HeatMap","Dropdown_Dropdown","groupedMap","filter","_ref","obstruction","reduce","acc","_ref2","_Object$assign","lat","long","count","values","sort","left","right","_ref3","__webpack_require__","d","__webpack_exports__","query","data","cityConfig","obstructions","id","ObstructionMap_ObstructionMap","result","file"],"mappings":"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","file":"component---src-templates-city-map-js-578fb1f46562733263aa.js","sourcesContent":["import React from \"react\"\nimport { Map } from \"react-leaflet\"\n\nexport class FullScreenMap extends React.Component {\n    state = {}\n\n    componentDidMount() {\n        if (typeof window !== 'undefined') {\n            window.addEventListener(\"resize\", this._updateDimensions)\n            this._updateDimensions()\n        }\n    }\n\n    componentWillUnmount() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener(\"resize\", this._updateDimensions)\n        }\n    }\n\n    _updateDimensions = () => {\n        if (typeof window !== 'undefined') {\n            const height = window.innerHeight\n            this.setState({ height: height })\n            this.forceUpdate()\n        }\n    }\n\n    render() {\n        const { children, ...rest } = this.props\n        const height = this.state.height\n\n        if (typeof window !== 'undefined' && height) {\n            return (\n                <Map style={{ height }} { ...rest }>\n                    { children }\n                </Map>\n            )\n        } else {\n            return null\n        }\n    }\n}\n","import React from \"react\"\nimport { TileLayer } from \"react-leaflet\"\nimport HeatmapLayer from \"react-leaflet-heatmap-layer\"\nimport { FullScreenMap } from \"./FullScreenMap\"\nimport mapStyle from \"./map.module.css\"\n\nexport class HeatMap extends React.Component {\n    render() {\n        const { position, zoom, points } = this.props\n\n        return (\n            <div className={mapStyle.map}>\n                <FullScreenMap center={position} zoom={zoom}>\n                    <TileLayer\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url='https://{s}.tile.osm.org/{z}/{x}/{y}.png'\n                    />\n                    { points && points.length > 0 && <HeatmapLayer\n                        points={points}\n                        latitudeExtractor={m => m[0]}\n                        longitudeExtractor={m => m[1]}\n                        intensityExtractor={m => parseFloat(m[2])}\n                    /> }\n                </FullScreenMap>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport dropdownStyles from \"./dropdown.module.css\"\n\nexport class Dropdown extends React.Component {\n    static defaultProps = {\n        options: []\n    }\n\n    _onChange = (event) => {\n        this.props.onChange(event.target.value)\n    }\n\n    _renderOptions = () => {\n        const { options } = this.props\n\n        return options.map(option => {\n            return <option key={option.key} value={option.key}>{ option.spinner }</option>\n        })\n    }\n\n    render() {\n        const { selectedOption } = this.props\n\n        return(\n            <div className={dropdownStyles.spinner_container}>\n                <select value={selectedOption} onChange={this._onChange}>\n                    { this._renderOptions() }\n                </select>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport { HeatMap } from \"../components/HeatMap\"\nimport { Dropdown } from \"./Dropdown\"\n\nexport class ObstructionMap extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            selectedOption: props.options[0].key\n        }\n    }\n\n    _onChangeObstruction = (key) => this.setState({ selectedOption: key })\n\n    render() {\n        const { position, zoom, options, getGroupedPoints } = this.props\n        const { selectedOption } = this.state\n        const points = getGroupedPoints(selectedOption)\n\n        return(\n            <div>\n                <HeatMap position={position} zoom={zoom} points={points} />\n                <Dropdown options={options} selectedOption={selectedOption} onChange={this._onChangeObstruction} />\n            </div>\n        )\n    }\n}\n","export const getGroupedPoints = (points) => (selectedOption) => {\n    const groupedMap = points\n        .filter(({obstruction}) => {\n            return obstruction === selectedOption || selectedOption === \"all\"\n        })\n        .reduce((acc, {lat, long}) => {\n            const key = `${lat},${long}`\n            const value = acc[key]\n            const count = value ? value.count : 0\n            return {\n                ...acc,\n                [key]: {\n                    lat,\n                    long,\n                    count: count + 1\n                }\n            }\n        }, {})\n\n    return Object.values(groupedMap)\n        .sort((left, right) => right.count - left.count)\n        .map(({ lat, long, count }) => [lat, long, count])\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { ObstructionMap } from \"../components/ObstructionMap\"\nimport { getGroupedPoints } from \"../utils/process\"\n\nexport default ({ data }) => {\n    const { cityConfig, obstructions, points } = data\n    const { position, zoom } = cityConfig\n\n    return (\n        <div id={\"map\"}>\n            <ObstructionMap\n                position={position}\n                zoom={zoom}\n                options={obstructions.result}\n                getGroupedPoints={getGroupedPoints(points.file.result)} />\n        </div>\n    )\n}\n\nexport const query = graphql`\n    query($cityKey: String!) {\n        cityConfig: citiesJson(fields: { key: { eq: $cityKey } }) {\n            name,\n            position,\n            zoom,\n            heat_radius\n        },\n        obstructions: file(\n            sourceInstanceName: { eq: \"data\" },\n            relativePath: { eq: \"obstructions.json\" }\n        ) {\n            result: childrenObstructionsJson {\n                key,\n                spinner,\n                data\n            }\n        },\n        points: file(\n            sourceInstanceName: { eq: \"points\" },\n            name: { eq: $cityKey }\n        ) {\n            file: childPointsJson {\n                result {\n                    lat,\n                    long,\n                    obstruction\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}