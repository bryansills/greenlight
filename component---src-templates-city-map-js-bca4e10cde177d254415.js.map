{"version":3,"sources":["webpack:///./src/components/FullScreenMap.js","webpack:///./src/components/HeatMap.js","webpack:///./src/components/Filters.js","webpack:///./src/components/ObstructionMap.js","webpack:///./src/utils/process.js","webpack:///./src/templates/CityMap.js"],"names":["FullScreenMap","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","state","_updateDimensions","window","height","innerHeight","setState","forceUpdate","inheritsLoose_default","_proto","prototype","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","_this$props","props","children","rest","objectWithoutPropertiesLoose_default","react_default","a","createElement","Map","Object","assign","style","React","Component","HeatMap","position","zoom","points","className","mapStyle","map","FullScreenMap_FullScreenMap","center","TileLayer","attribution","url","HeatmapLayer_default","latitudeExtractor","m","longitudeExtractor","intensityExtractor","parseFloat","Filters","_onChange","event","onObstructionChange","target","value","_formatLabel","type","baseDate","clone","add","format","_renderOptions","obstructions","option","key","spinner","selectedObstruction","minDate","maxDate","dateRange","onDateRangeChange","styles","filters_positioning","filters_border","filters_fill","onChange","js_default","minValue","maxValue","formatLabel","defaultProps","ObstructionMap","_onObstructionChange","selectedOption","_onDateRangeChange","_getPoints","getGroupedPoints","_this$state","min","max","moment","rangeDiff","diff","options","_this$state2","HeatMap_HeatMap","Filters_Filters","groupedMap","filter","_ref","obstruction","_ref2","timestamp","isBetween","reduce","acc","_ref3","_Object$assign","lat","long","count","values","sort","left","right","_ref4","__webpack_require__","d","__webpack_exports__","query","data","cityConfig","id","ObstructionMap_ObstructionMap","result","file"],"mappings":"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","file":"component---src-templates-city-map-js-bca4e10cde177d254415.js","sourcesContent":["import React from \"react\"\nimport { Map } from \"react-leaflet\"\n\nexport class FullScreenMap extends React.Component {\n    state = {}\n\n    componentDidMount() {\n        if (typeof window !== 'undefined') {\n            window.addEventListener(\"resize\", this._updateDimensions)\n            this._updateDimensions()\n        }\n    }\n\n    componentWillUnmount() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener(\"resize\", this._updateDimensions)\n        }\n    }\n\n    _updateDimensions = () => {\n        if (typeof window !== 'undefined') {\n            const height = window.innerHeight\n            this.setState({ height: height })\n            this.forceUpdate()\n        }\n    }\n\n    render() {\n        const { children, ...rest } = this.props\n        const height = this.state.height\n\n        if (typeof window !== 'undefined' && height) {\n            return (\n                <Map style={{ height }} { ...rest }>\n                    { children }\n                </Map>\n            )\n        } else {\n            return null\n        }\n    }\n}\n","import React from \"react\"\nimport { TileLayer } from \"react-leaflet\"\nimport HeatmapLayer from \"react-leaflet-heatmap-layer\"\nimport { FullScreenMap } from \"./FullScreenMap\"\nimport mapStyle from \"./map.module.css\"\n\nexport class HeatMap extends React.Component {\n    render() {\n        const { position, zoom, points } = this.props\n\n        return (\n            <div className={mapStyle.map}>\n                <FullScreenMap center={position} zoom={zoom}>\n                    <TileLayer\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url='https://{s}.tile.osm.org/{z}/{x}/{y}.png'\n                    />\n                    { points && points.length > 0 && <HeatmapLayer\n                        points={points}\n                        latitudeExtractor={m => m[0]}\n                        longitudeExtractor={m => m[1]}\n                        intensityExtractor={m => parseFloat(m[2])}\n                    /> }\n                </FullScreenMap>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport InputRange from 'react-input-range'\nimport \"react-input-range/lib/css/index.css\"\nimport styles from \"./filters.module.css\"\n\nexport class Filters extends React.Component {\n    static defaultProps = {\n        obstructions: []\n    }\n\n    _onChange = (event) => {\n        this.props.onObstructionChange(event.target.value)\n    }\n\n    _formatLabel = (value, type) => {\n        const { baseDate } = this.props\n\n        if (type === \"max\") {\n            return \"Latest\"\n        } else if (type === \"min\") {\n            return \"Oldest\"\n        } else {\n            return baseDate.clone().add(value, \"days\").format(\"MMM YYYY\")\n        }\n    }\n\n    _renderOptions = () => {\n        const { obstructions } = this.props\n\n        return obstructions.map(option => {\n            return <option key={option.key} value={option.key}>{ option.spinner }</option>\n        })\n    }\n\n    render() {\n        const { selectedObstruction, minDate, maxDate, dateRange, onDateRangeChange } = this.props\n\n        return(\n            <div className={styles.filters_positioning}>\n                <div className={styles.filters_border}>\n                    <div className={styles.filters_fill}>\n                        <select value={selectedObstruction} onChange={this._onChange}>\n                            { this._renderOptions() }\n                        </select>\n                        <InputRange\n                            minValue={minDate}\n                            maxValue={maxDate}\n                            value={dateRange}\n                            formatLabel={this._formatLabel}\n                            onChange={onDateRangeChange} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport { HeatMap } from \"../components/HeatMap\"\nimport { Filters } from \"./Filters\"\nimport moment from \"moment\"\n\nexport class ObstructionMap extends React.Component {\n    constructor(props) {\n        super(props)\n\n        const baseDate = moment(\"2017-08-29\")\n        const currentDate = moment()\n        const rangeDiff = currentDate.diff(baseDate, \"days\")\n\n        this.state = {\n            selectedOption: props.options[0].key,\n            baseDate,\n            minDate: 0,\n            maxDate: rangeDiff,\n            dateRange: {\n                min: 0,\n                max: rangeDiff\n            }\n        }\n    }\n\n    _onObstructionChange = (selectedOption) => this.setState({ selectedOption })\n\n    _onDateRangeChange = (dateRange) => this.setState({ dateRange })\n\n    _getPoints = () => {\n        const { getGroupedPoints } = this.props\n        const { selectedOption, baseDate, dateRange } = this.state\n        const { min, max } = dateRange\n\n        const minDate = baseDate.clone().add(min, \"days\")\n        const maxDate = baseDate.clone().add(max, \"days\")\n\n        return getGroupedPoints(selectedOption, minDate, maxDate)\n    }\n\n    render() {\n        const { position, zoom, options } = this.props\n        const { selectedOption, baseDate, minDate, maxDate, dateRange } = this.state\n\n        return(\n            <div>\n                <HeatMap position={position} zoom={zoom} points={this._getPoints()} />\n                <Filters\n                    obstructions={options}\n                    selectedObstruction={selectedOption}\n                    onObstructionChange={this._onObstructionChange}\n                    baseDate={baseDate}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    dateRange={dateRange}\n                    onDateRangeChange={this._onDateRangeChange} />\n            </div>\n        )\n    }\n}\n","import moment from \"moment\"\n\nexport const getGroupedPoints = (points) => (selectedOption, minDate, maxDate) => {\n    const groupedMap = points\n        .filter(({obstruction}) => {\n            return obstruction === selectedOption || selectedOption === \"all\"\n        })\n        .filter(({timestamp}) => {\n            const timestampMoment = moment(timestamp)\n            return timestampMoment.isBetween(minDate, maxDate, \"day\", \"[]\")\n        })\n        .reduce((acc, {lat, long}) => {\n            const key = `${lat},${long}`\n            const value = acc[key]\n            const count = value ? value.count : 0\n            return {\n                ...acc,\n                [key]: {\n                    lat,\n                    long,\n                    count: count + 1\n                }\n            }\n        }, {})\n\n    return Object.values(groupedMap)\n        .sort((left, right) => right.count - left.count)\n        .map(({ lat, long, count }) => [lat, long, count])\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { ObstructionMap } from \"../components/ObstructionMap\"\nimport { getGroupedPoints } from \"../utils/process\"\n\nexport default ({ data }) => {\n    const { cityConfig, obstructions, points } = data\n    const { position, zoom } = cityConfig\n\n    return (\n        <div id={\"map\"}>\n            <ObstructionMap\n                position={position}\n                zoom={zoom}\n                options={obstructions.result}\n                getGroupedPoints={getGroupedPoints(points.file.result)} />\n        </div>\n    )\n}\n\nexport const query = graphql`\n    query($cityKey: String!) {\n        cityConfig: citiesJson(fields: { key: { eq: $cityKey } }) {\n            name,\n            position,\n            zoom,\n            heat_radius\n        },\n        obstructions: file(\n            sourceInstanceName: { eq: \"data\" },\n            relativePath: { eq: \"obstructions.json\" }\n        ) {\n            result: childrenObstructionsJson {\n                key,\n                spinner,\n                data\n            }\n        },\n        points: file(\n            sourceInstanceName: { eq: \"points\" },\n            name: { eq: $cityKey }\n        ) {\n            file: childPointsJson {\n                result {\n                    lat,\n                    long,\n                    obstruction,\n                    timestamp\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}